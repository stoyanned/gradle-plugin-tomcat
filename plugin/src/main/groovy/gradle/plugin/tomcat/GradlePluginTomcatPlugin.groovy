/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package gradle.plugin.tomcat

import groovy.ant.AntBuilder
import groovy.xml.XmlParser
import jakarta.servlet.http.HttpServlet
import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletResponse
import org.apache.catalina.LifecycleException
import org.apache.catalina.util.ServerInfo
import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.apache.catalina.startup.Tomcat
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction


class StartTomcatTask extends DefaultTask {
    public static final String TOMCAT_M2_URL='https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/'

    @Input
    String tomcatVersion = ''

    @TaskAction
    void startTomcat() {
        def tempDir = new File(System.getProperty("java.io.tmpdir"))
        def newDirectoryName = "tomcat"
        def tomcatDir = new File(tempDir, newDirectoryName)
        if (tomcatDir.exists()){
            def deleteDirectory = { File dir ->
                if (dir.exists()) {
                    def ant = new AntBuilder()
                    ant.delete(dir: dir)
                    println "Directory deleted: ${dir.absolutePath}"
                } else {
                    println "Directory does not exist: ${dir.absolutePath}"
                }
            }
            deleteDirectory(tomcatDir)
        }

        tomcatDir.mkdirs()
        tomcatDir.setReadable(true, false)
        tomcatDir.setWritable(true, false)

        def tomcatZipUrl = "${TOMCAT_M2_URL}${tomcatVersion}/tomcat-${tomcatVersion}.zip"
        def tomcatZip = new File(tomcatDir, "tomcat.zip")

        try {
            def url = new URL(tomcatZipUrl)
            def connection = url.openConnection()
            def inputStream = connection.inputStream


            // Create parent directories if they don't exist
            tomcatZip.parentFile.mkdirs()

            def outputStream = new FileOutputStream(tomcatZip)

            // Download and write the file
            outputStream << inputStream

            // Close streams
            outputStream.close()
            inputStream.close()
        } catch (Exception e) {
            println "Error downloading ZIP file: ${e.message}"
        }

        try {
            def ant = new AntBuilder()
            ant.unzip(
                    src: tomcatZip,
                    dest: tomcatDir,
                    overwrite: "true"
            )
        } catch (Exception e) {
            e.printStackTrace()
        }

        File f = new File(tomcatDir, "/apache-tomcat-${tomcatVersion}/bin/catalina.sh")
        f.setExecutable(true)
        project.exec {
            commandLine tomcatDir.toPath().toString()+"/apache-tomcat-${tomcatVersion}/bin/catalina.sh", "start"
        }
    }
}

class GradlePluginTomcatPlugin implements Plugin<Project> {
    def getLatestTomcatVersion() {
        def url1 = new URL(StartTomcatTask.TOMCAT_M2_URL+"maven-metadata.xml")
        def connection1 = url1.openConnection()
        def inputStream1 = connection1.inputStream
        def tempDir1 = new File(System.getProperty("java.io.tmpdir"))
        def xmlFile1 = new File(tempDir1, "maven-metadata.xml")

        try {
            def outputStream = new FileOutputStream(xmlFile1)
            // Download and write the file
            outputStream << inputStream1

            // Close streams
            outputStream.close()
            inputStream1.close()
        } catch (Exception e) {
            e.printStackTrace()
        }
        def metadata = new XmlParser().parseText(xmlFile1.text)
        return metadata.versioning.latest.text()
    }
    void apply(Project project) {
        project.tasks.register('startTomcatZip', StartTomcatTask.class){
            tomcatVersion=getLatestTomcatVersion() // 11.0.0-M13
        }

        project.task("stopTomcatZip") {
            if (project.hasProperty('stopTomcat') && project.stopTomcat){
                def latestVersion = getLatestTomcatVersion()
                def tempDir = new File(System.getProperty("java.io.tmpdir"))
                def newDirectoryName = "tomcat"
                def tomcatDir = new File(tempDir, newDirectoryName)
                project.exec {
                    commandLine tomcatDir.toPath().toString()+"/apache-tomcat-"+latestVersion+"/bin/catalina.sh", "stop"
                }
            }
        }

        project.task('startTomcat') {
            doLast {
                if (project.hasProperty('runTomcat') && project.runTomcat) {
                    println("Starting Tomcat...")
                    def tomcat = new Tomcat()
                    tomcat.getConnector().setPort(9090)

                    def context = tomcat.addContext("/", new File(".").getAbsolutePath())
                    Tomcat.addServlet(context, "MyServlet", new HttpServlet() {
                        void service(HttpServletRequest req, HttpServletResponse res) {
                            res.getWriter().println("Hello, Tomcat!")
                        }
                    })
                    context.addServletMappingDecoded("/", "MyServlet")
                    try {
                        tomcat.start()
                        println("Tomcat started. Access the web page at http://localhost:9090/")
                        println("Version: "+ServerInfo.getServerNumber())
                        println("To stop Tomcat do Ctrl + C")
                        tomcat.getServer().await()
                    } catch (LifecycleException e) {
                        throw new RuntimeException('Error starting Tomcat', e)
                    }
                }
            }
        }
    }
}
